<?php

namespace Tests\Feature;

use App\Models\Product;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductControllerTest extends TestCase
{
    private $product;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];

        $this->product = Product::create($attr);

    }

    /**
     * @test
     * @testdox Index controller
     * @group ignore
     */
    public function testIndex()
    {

        $response = $this->getJson('/api/products');
        $response
            ->assertStatus(200)
            ->assertSeeText($this->product->name)
            ->assertSeeText($this->product->description);
    }

    public function testStore()
    {
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];


        $response = $this->postJson( '/api/products', $attr);
        $response
            ->assertStatus(200)
            ->assertSeeText($attr['name'])
            ->assertSeeText($attr['description']);

    }
    public function testStoreNameNotNull()
    {

        $response = $this->postJson( '/api/products',[
            'name' => ''
        ]);
        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['name']);


    }

    public function testStoreValidationNameMax()
    {

        $response = $this->postJson( '/api/products',[
            'name' => $this->faker->sentence(258)
        ]);
        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['name']);

    }



    public function testShow()
    {
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];

        $gender = Product::create($attr);
        $response = $this->getJson('/api/products/' . $gender->id );
        $response->assertStatus(200);
        $this->assertEquals($response->json('name'), $attr['name']);

    }

    public function testUpdate()
    {
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];

        $gender = Product::create($attr);
        $response = $this->putJson('/api/products/'. $gender->id, [
            'name' => $attr['name']
        ]);

        $response->assertStatus(200);
        $this->assertEquals($response->json('name'), $attr['name']);

    }

    public function testUpdateNameNotNull()
    {
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];

        $gender = Product::create($attr);
        $response = $this->putJson('/api/products/'. $gender->id, [
            'name' => ''
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['name']);

    }

    public function testUpdateDescriptionNull()
    {
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];

        $gender = Product::create($attr);
        $response = $this->putJson('/api/products/'. $gender->id, [
            'name' => $attr['name'],
            'description' => null
        ]);

        $response->assertStatus(200);
        $this->assertNull($response->json('description'));

    }

    public function testDestroy()
    {
        $attr = [
            'name' => $this->faker->name,
            'description' => $this->faker->sentence
        ];

        $gender = Product::create($attr);
        $response = $this->deleteJson('/api/products/' . $gender->id);
        $response->assertStatus(204);
        $response->assertNoContent();

    }
}
